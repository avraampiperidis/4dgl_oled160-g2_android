{
  "name": "4dgl oled160-g2 notifier",
  "tagline": "android notifications to mOled-160-G2 via bluetooth ",
  "body": "### Android notifications to mOled-160-G2 via bluetooth.\r\n-------------\r\nA very simple step by step guide/tutorial to create a wireless(bluetooth) 1.7 inch monitor,\r\nan android app to connect to it,and automatically send every notifications\r\nfrom android to monitor.\r\n\r\n#### required components\r\n1)uOLED-160G2 Display Module\r\n![uOLED-160G2](https://github.com/avraampiperidis/4dgl_oled160-g2_notifier/blob/master/pagepics/pic1.png?raw=true)\r\n[display module](http://www.4dsystems.com.au/product/uOLED_160_G2/)\r\n<br>\r\n2)uUSB-PA5-II Programming Adaptor\r\n![uOLED-160G2](https://github.com/avraampiperidis/4dgl_oled160-g2_notifier/blob/master/pagepics/apic3.jpg?raw=true)\r\n[adapter](http://www.4dsystems.com.au/product/uUSB_PA5/)\r\n<br>\r\n3)Bluetooth module\r\n![uOLED-160G2](https://github.com/avraampiperidis/4dgl_oled160-g2_notifier/blob/master/pagepics/bpic1.jpg?raw=true)![uOLED-160G2](https://github.com/avraampiperidis/4dgl_oled160-g2_notifier/blob/master/pagepics/bpic2.jpg?raw=true)\r\n<br>\r\n4)Programming Cable\r\n![uOLED-160G2](https://github.com/avraampiperidis/4dgl_oled160-g2_notifier/blob/master/pagepics/pic4.jpg?raw=true)\r\n<br>\r\n5)USB to 4-pin cable\r\n![uOLED-160G2](https://github.com/avraampiperidis/4dgl_oled160-g2_notifier/blob/master/pagepics/pic5.png?raw=true)\r\n<br>\r\n6)4-pin to 4-pin cable\r\n![uOLED-160G2](https://github.com/avraampiperidis/4dgl_oled160-g2_notifier/blob/master/pagepics/pic5.jpg?raw=true)\r\n<br>\r\n7)Any USB power bank\r\n![uOLED-160G2](https://github.com/avraampiperidis/4dgl_oled160-g2_notifier/blob/master/pagepics/pic6.png?raw=true)\r\n<br>\r\n8)Workshop4 IDE\r\n[link](http://www.4dsystems.com.au/product/4D_Workshop_4_IDE/)\r\n<br>\r\n9)Android Studio\r\n<br>\r\n#### Starting from Android Studio and the app\r\nI will post small snippets of the actual code.\r\nClone this git to get the whole project.\r\n\r\n##### first some important stuff about AndroidManifest.xml\r\n```xml\r\n <uses-permission android:name=\"android.permission.READ_PHONE_STATE\" />\r\n    <uses-permission\r\n        android:name=\"android.permission.BLUETOOTH\" />\r\n    <uses-permission\r\nandroid:name=\"android.permission.BLUETOOTH_ADMIN\" />\r\n```\r\nandroid.permission.READ_PHONE_STATE to get the carrier network\r\nandroid.permission.BLUETOOTH_ADMIN to get access to turn off n on the bluetooth\r\n<br>\r\n<br>\r\n```xml\r\n <service android:name=\"com.example.abraham.iNotify.NLService\"\r\n            android:label=\".NLService\"\r\n            android:permission=\"android.permission.BIND_NOTIFICATION_LISTENER_SERVICE\">\r\n            <intent-filter>\r\n                <action android:name=\"android.service.notification.NotificationListenerService\" />\r\n            </intent-filter>\r\n</service>\r\n```\r\nWe declare our notification service class.\r\nThe service class is the NLService witch we will create later.\r\nThis service will run in the background,and will receive every notification.\r\n<br>\r\n<br>\r\n\r\nBasically its only three classes,MainActivity,NLService,Utilities\r\nNLService its the notification service.\r\nMainActivity its the app's main activity with some buttons\r\nUtilities contains some string n utils methods\r\n<br>\r\n\r\n##### MainActivity\r\n```java\r\n@Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_main);\r\n\r\n        Intent intent = new Intent(\"android.settings.ACTION_NOTIFICATION_LISTENER_SETTINGS\");\r\n        startActivity(intent);\r\n}\r\n```  \r\nNote this lines:\r\nIntent intent = new Intent(\"android.settings.ACTION_NOTIFICATION_LISTENER_SETTINGS\");\r\nstartActivity(intent);\r\n<br>\r\nthis is needed to start an activity and the user can give permission to NLSerivce to run.\r\n<br>\r\nwe need to mention the below method createNotification()\r\nwitch can create notifications for test.\r\n```java\r\npublic void createNotification(View v) {\r\n        NotificationManager nManager = (NotificationManager) getSystemService(NOTIFICATION_SERVICE);\r\n        NotificationCompat.Builder ncomp = new NotificationCompat.Builder(this);\r\n        ncomp.setContentTitle(\"My Notification Title\");\r\n        ncomp.setContentText(\"Notification example\");\r\n        ncomp.setTicker(\"Notification LExample\");\r\n        ncomp.setSmallIcon(R.drawable.ic_launcher);\r\n        ncomp.setAutoCancel(true);\r\n        nManager.notify((int)System.currentTimeMillis(),ncomp.build());\r\n}\r\n```\r\n<br>\r\nand i have a sendMessage method\r\nwitch takes the text from edittext and send's it to outputstream \"bluetooth at our case\"\r\n```java\r\npublic void sendMessage(View view) throws IOException {\r\n        EditText editText = (EditText) findViewById(R.id.edit_message);\r\n        String textToSend = editText.getText().toString();\r\n        NLService.sendMessage(textToSend);\r\n}\r\n```\r\n<br>\r\n<br>\r\n##### NLService\r\nand now some important things about the notification service class.\r\nFirst of all NLService class extends the NotificationListenerService class in witch extends the Service class.\r\nNow the whole bluetooth initialization and connection to the remote bluetooth is happening \r\ninside the onCreate() method witch is run when user gives permission.\r\n<br>\r\nbasically we this global variables\r\n```java\r\nprivate static BluetoothAdapter mBluetoothAdapter;\r\nprivate static BluetoothSocket mmSocket;\r\nprivate static BluetoothDevice mmDevice;\r\nprivate static OutputStream mmOutputStream;\r\n```\r\n<br>\r\nThe important stuff at onCreate.\r\nfirst we get a reference to the bluetooth adapter\r\n```java\r\n mBluetoothAdapter = BluetoothAdapter.getDefaultAdapter();\r\n        //bluetooth hardware is absent\r\n        if(mBluetoothAdapter == null) {\r\n            makeText(\"Device does not support Bluetooth! Exiting!\");\r\n            return;\r\n        }\r\n```\r\n<br>\r\nthen we get the devices and we search for the remote bluetooth we want\r\ndevice.getName().startsWith(\"HC\") HC is the name for my bluetooth\r\n```java\r\nSet<BluetoothDevice> pairedDevices = mBluetoothAdapter.getBondedDevices();\r\n            for (BluetoothDevice device : pairedDevices) {\r\n                //HC is the remote bluetooth module\r\n                if (device.getName().startsWith(\"HC\")) {\r\n                    mmDevice = device;\r\n                    break;\r\n                }\r\n            }\r\n```\r\n<br>\r\nAs we found the bluetooth , we then connect to it.\r\n```java\r\n//Standard //SerialPortService ID //we need this\r\nUUID uuid = UUID.fromString(\"00001101-0000-1000-8000-00805f9b34fb\");\r\nmmSocket = mmDevice.createRfcommSocketToServiceRecord(uuid);\r\nmmSocket.connect();\r\nmmOutputStream = mmSocket.getOutputStream();\r\n```\r\n<br>\r\nThats it!\r\nThe android bluetooth is now connected to the remote bluetooth.\r\nAnd we can start sending bytes.\r\nWe can send bytes from the mmOutputStream object.\r\n<br>\r\nWe start by sending first our network carrier name.<br>\r\n```java\r\nTelephonyManager manager = (TelephonyManager) getSystemService(Context.TELEPHONY_SERVICE);\r\nString carrierName = manager.getNetworkOperatorName();\r\nif(carrierName == null) {\r\n     //not sim/telephone\r\n     makeText(\"No telephony support!\");\r\n} else {\r\n     mmOutputStream.write(carrierName.getBytes());\r\n     mmOutputStream.write(\"   iNotify               \".getBytes());\r\n}\r\n```\r\nAnd the results in two pictures.\r\n![pic7](https://github.com/avraampiperidis/4dgl_oled160-g2_notifier/blob/master/pagepics/pic7.jpg?raw=true)<br>\r\n![pic8](https://github.com/avraampiperidis/4dgl_oled160-g2_notifier/blob/master/pagepics/pic8.jpg?raw=true)\r\n<br>\r\nfor the time i have a thread running forever and sending time every one minute.\r\nthe time wont be sent if the monitor has an notification and the user hasn't read it.\r\n```java\r\n//every 1 minute send time\r\n//better to change to global variable thread\r\n        new Thread() {\r\n            public void run() {\r\n\r\n                while (true) {\r\n\r\n                    try {\r\n                        //60000 millis = 1 min\r\n                        Thread.sleep(60000);\r\n                        //if false means user read/cleaned all notifications\r\n                        if (notifyRead == false) {\r\n\r\n                            Calendar c = Calendar.getInstance();\r\n                            int minutes = c.get(Calendar.MINUTE);\r\n                            int hour = c.get(Calendar.HOUR);\r\n                            String time = hour + \":\" + minutes;\r\n\r\n                            try {\r\n                                mmOutputStream.write('~');\r\n                                mmOutputStream.write(time.getBytes());\r\n                            } catch (IOException e) {\r\n                                e.printStackTrace();\r\n                            }\r\n                        }\r\n\r\n                    } catch (InterruptedException e) {\r\n                        e.printStackTrace();\r\n                    }\r\n\r\n                }\r\n            }\r\n}.start();\r\n```\r\n<br>\r\nWe override onNotificationPosted() method.<br>\r\nThis methods gets called for every notification the phone gets.<br>\r\nIt carries an object(StatusBarNotification) with the content of the notification.\r\n```java\r\npublic void onNotificationPosted(StatusBarNotification sbn) {\r\n      ...\r\n      //In General the Basic flow\r\n      //First get the notification object\r\n      Notification mNotification = sbn.getNotification();\r\n      //from that we only care about the title\r\n      String title = mNotification.extras.getString(Notification.EXTRA_TITLE);\r\n      //and the content text\r\n      String text = mNotification.extras.getString(Notification.EXTRA_TEXT);\r\n      //I guest you can get other things to like icons ,keys...\r\n\r\n      //and now that we have the content of the new notification\r\n      //we want to send it to the bluetooth\r\n      mmOutputStream.write('>');\r\n      mmOutputStream.write(text.getBytes());\r\n\r\n      //true because its new notification, till the user press clear/clean from top bar it wont change.\r\n      notifyRead = true;\r\n      ...\r\n}\r\n```\r\n<br>\r\nNext we override this method onNotificationRemoved.<br>\r\nThis method gets called when the user cleans the notifications.\r\n```java\r\n @Override\r\n    public void onNotificationRemoved(StatusBarNotification sbn) {\r\n        if(inputKeyboard == true) {\r\n            inputKeyboard = false;\r\n        } else {\r\n            try {\r\n                notifyRead = false;\r\n                mmOutputStream.write('`');\r\n            } catch (IOException e) {\r\n                e.printStackTrace();\r\n            }\r\n        }\r\n}\r\n```\r\nbasically the notifyRead = false means the user have read the notification<br>\r\nand the clock/time thread will send time normaly.<br>\r\nmmOutputStream.write('`') the '`' Character is a key for the monitor side code to clear the screen.\r\n<br>\r\nAnd this is how we send messages\r\n```java\r\npublic static  void sendMessage(String s) throws IOException {\r\n        try {\r\n            mmOutputStream.write('>');\r\n            mmOutputStream.write(s.getBytes());\r\n        } catch (IOException ex) {\r\n        }\r\n    }\r\n```\r\nthe Character > means create new line for the monitor.\r\n<br>\r\n####uOLED-160-G2 Display Module\r\nNow that we finished from the android app<br>\r\nwe gona see how to <br>\r\n**1)**connect the display to the PC<br>\r\n**2)**make the program and load it<br>\r\n**3)**build/connect/put together the modules<br>\r\n**4)**and start it.<br>\r\n<br>\r\nLets start with the uOLED-160-G2 Display Module its self<br>\r\n![pic9](https://github.com/avraampiperidis/4dgl_oled160-g2_notifier/blob/master/pagepics/pic9.jpg?raw=true)<br>\r\nWe gona mention some important stuff about the monitor<br>\r\nFist we need to understand some basic input output pins.<br>\r\n![pic10](https://github.com/avraampiperidis/4dgl_oled160-g2_notifier/blob/master/pagepics/pic10.png?raw=true)\r\n<br>\r\n![pic11](https://github.com/avraampiperidis/4dgl_oled160-g2_notifier/blob/master/pagepics/pic11.png?raw=true)\r\n<br>\r\nFrom the above we need to remember/know the following:<br>\r\n**Pin 1:**Input voltage supply,this is where the display taking power<br>\r\n  in out case its from usb power bank the +pin to Pin 1.<br>\r\n**Pin 2:**Output voltage, When we connect the bluetooth module to the display<br>\r\n  it need power to work, this is where it gets it.<br>\r\n**Pin 5:**RX, this receives the data/bytes from the bluetooth module.<br>\r\n**Pin 7:**Ground for usb power bank<br>\r\n**Pin 8:**Ground for bluetooth module<br>\r\n<br>\r\n#####1)connect the display to the PC\r\nconnect the display using the uUSB-PA5-II Programming Adaptor or the \r\nProgramming Cable.<br>\r\nsee info here [info](http://www.4dsystems.com.au/product/uUSB_PA5/)\r\n<br> and here\r\n[info](http://www.4dsystems.com.au/product/4D-Programming-Cable/)\r\n<br>\r\nWhen connecting the display to pc remember <br>\r\nthe display pins to connect to cable are 1,3,5,7,9 <br>\r\nand it goes ,+5V to +5v,RX to RX,TX to TX,GND to GND,RES to RES.<br>\r\nCheck the official quick start guide pdf<br>\r\n[guide](http://www.4dsystems.com.au/productpages/GOLDELOX/downloads/GOLDELOX_qsg_R_1_0.pdf)\r\n<br>\r\n#####2)make the program and load it\r\nthe language its 4DGL and its kind similar with c.<br>\r\nlets define a simple function<br>\r\nthe bolow function clean the screen contents<br>\r\n```c\r\nfunc cleanScrean()\r\n      var count := 0;\r\n      txt_MoveCursor(1,0);\r\n      while(count < 16)\r\n           print(\"                                  \\n\");\r\n           count++;\r\n      wend\r\n      txt_MoveCursor(1,0);\r\n      count := 0;\r\nendfunc\r\n```\r\nNote: the code im writing here its not complete!<br>\r\nits just the important parts.<br>\r\nThe program starts with the func main()<br>\r\nwe declare a global variable var combuf[96]; to store characters.<br>\r\nThe first think that is happening when the program begins is below in code.<br>\r\n```c\r\ntxt_MoveCursor(0,0); // reset cursor to line 1, column 1\r\nputstr(\"Connecting..pass:1234\");\r\ntxt_MoveCursor(0,0);\r\n...\r\n// set up a comms circular buffer, use the entire buffer, no sync character\r\ncom_Init(combuf, 96, 0);\r\n```\r\nmove the cursor at the beginning and show Connecting..pass:1234.<br>\r\nfor my bluetooth modules the password was 1234.<br>\r\nAfter that we have a never ending repeat with some while loops.<br>\r\nThe while loops is when there is input bytestream,<br>\r\nfor every single char is one loop.<br>\r\n<br>\r\nInside the while loops i'm checking some special characters that i'm passing from android app we made previous.<br>\r\nfirst check is the clean screen char im sending from android app.\r\n```c\r\n while ((char := serin()) >= 0) \r\n\r\n    //` special char indicate clearScreen\r\n    if(char == '`')\r\n       cleanScrean();\r\n       ref := 0;\r\n    endif\r\n\r\n wend\r\n```\r\n<br>\r\nAnother special char im sending from android is to show time.<br>\r\n```c\r\n //special char, show time\r\n               if(char == '~')\r\n                    cleanScrean();\r\n\r\n                    txt_MoveCursor(6,4);\r\n                    txt_Set(TEXT_WIDTH,3);\r\n                    txt_Set(TEXT_HEIGHT,3);\r\n\r\n                    while ((char := serin()) >= 0)\r\n                        if(timeloop >= 5)\r\n                            ref := 0;\r\n                            txt_Set(TEXT_WIDTH,1);\r\n                            txt_Set(TEXT_HEIGHT,1);\r\n                            txt_MoveCursor(1,0);\r\n                            timeloop := 0;\r\n                            break;\r\n                        else\r\n                        txt_Set(TEXT_WIDTH,3);\r\n                        txt_Set(TEXT_HEIGHT,3);\r\n                        //putch this is whene the characters become visible in the display\r\n                        putch(char);\r\n                        timeloop++;\r\n                        endif\r\n                    wend\r\n\r\n                  txt_MoveCursor(1,0);\r\nendif\r\n```\r\nAnother spacial char is the create new line char.<br>\r\n```c\r\n//new line\r\n              if(char == '>')\r\n                //14 lines is max\r\n                //so clean screen and start from top\r\n                if(ref == 14)\r\n                    cleanScrean();\r\n                    ref :=0;\r\n                endif\r\n                print(\"\\n\");\r\n                c := 0;\r\n                ref++;\r\nendif\r\n```\r\nExcept the special chars , all the others goes directly to the screen.<br>\r\n```c\r\n//print char\r\nputch(char);\r\n```\r\n<br>\r\n#####3)build/connect/put together the modules\r\n<br>\r\nNow that the code is made and loaded to the display we need to put together the bluetooth,usb power bank and the display.<br>\r\nFirst lest connect the bluetooth to the display.<br>\r\nhere are the bluetooth pins.<br>\r\n![pic11](https://github.com/avraampiperidis/4dgl_oled160-g2_notifier/blob/master/pagepics/pic12.jpg?raw=true)\r\n<br>\r\nto make the connections we need this.<br>\r\n![wires](https://github.com/avraampiperidis/4dgl_oled160-g2_notifier/blob/master/pagepics/pic5.jpg?raw=true)\r\n<br>\r\nand the connections from bluetooth to display is the following.<br>\r\n**bluetooth VCC PIN<--> display 5V out PIN 2**<br>\r\n**bluetooth TXD PIN <--> display RX PIN 5**<br>\r\n**bluetooth GND PIN <--> display GND PIN 8**<br>\r\n<br>\r\nsecondly we gona connect the usb power bank to display.<br>\r\nto make the connections we need this.<br>\r\n![power cable](https://github.com/avraampiperidis/4dgl_oled160-g2_notifier/blob/master/pagepics/pic5.png?raw=true)\r\n<br>\r\nand the connections from usb cable pins to display is the following.<br>\r\n**Usb VCC+ PIN<--> display +5V PIN 1**<br>\r\n**Usb GND PIN <--> display GND PIN 7**<br>\r\n<br>\r\nThat's it plug in the usb power bank<br>\r\nand will start waiting for connection.<br>\r\nAnd the results.<br>\r\n![display](https://github.com/avraampiperidis/4dgl_oled160-g2_notifier/blob/master/pagepics/pic13.jpg?raw=true)<br>\r\n![display](https://github.com/avraampiperidis/4dgl_oled160-g2_notifier/blob/master/pagepics/pic14.jpg?raw=true)<br>\r\n![display](https://github.com/avraampiperidis/4dgl_oled160-g2_notifier/blob/master/pagepics/pic15.jpg?raw=true)<br>\r\n<br>\r\nIn the future if i have time i will create a mini game arcade style based on this,<br>\r\nand it will be controlled from android.\r\n\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}