{
  "name": "4dgl oled160-g2 notifier",
  "tagline": "android notifications to mOled-160-G2 via bluetooth ",
  "body": "### Android notifications to mOled-160-G2 via bluetooth.\r\n-------------\r\nA very simple step by step guide/tutorial to create a wireless(bluetooth) 1.7 inch monitor,\r\nan android app to connect to it,and automatically send every notifications\r\nfrom android to monitor.\r\n\r\n#### required components\r\n1)uOLED-160G2 Display Module\r\n![uOLED-160G2](https://github.com/avraampiperidis/4dgl_oled160-g2_notifier/blob/master/pagepics/pic1.png?raw=true)\r\n[display module](http://www.4dsystems.com.au/product/uOLED_160_G2/)\r\n<br>\r\n2)uUSB-PA5-II Programming Adaptor\r\n![uOLED-160G2](https://github.com/avraampiperidis/4dgl_oled160-g2_notifier/blob/master/pagepics/apic3.jpg?raw=true)\r\n[adapter](http://www.4dsystems.com.au/product/uUSB_PA5/)\r\n<br>\r\n3)Bluetooth module\r\n![uOLED-160G2](https://github.com/avraampiperidis/4dgl_oled160-g2_notifier/blob/master/pagepics/bpic1.jpg?raw=true)![uOLED-160G2](https://github.com/avraampiperidis/4dgl_oled160-g2_notifier/blob/master/pagepics/bpic2.jpg?raw=true)\r\n<br>\r\n4)Programming Cable\r\n![uOLED-160G2](https://github.com/avraampiperidis/4dgl_oled160-g2_notifier/blob/master/pagepics/pic4.jpg?raw=true)\r\n<br>\r\n5)USB to 4-pin cable\r\n![uOLED-160G2](https://github.com/avraampiperidis/4dgl_oled160-g2_notifier/blob/master/pagepics/pic5.png?raw=true)\r\n<br>\r\n6)4-pin to 4-pin cable\r\n![uOLED-160G2](https://github.com/avraampiperidis/4dgl_oled160-g2_notifier/blob/master/pagepics/pic5.jpg?raw=true)\r\n<br>\r\n7)Any USB power bank\r\n![uOLED-160G2](https://github.com/avraampiperidis/4dgl_oled160-g2_notifier/blob/master/pagepics/pic6.png?raw=true)\r\n<br>\r\n8)Workshop4 IDE\r\n[link](http://www.4dsystems.com.au/product/4D_Workshop_4_IDE/)\r\n<br>\r\n9)Android Studio\r\n<br>\r\n#### Starting from Android Studio and the app\r\nI will post small snippets of the actual code.\r\nClone this git to get the whole project.\r\n\r\n##### first some important stuff about AndroidManifest.xml\r\n```xml\r\n <uses-permission android:name=\"android.permission.READ_PHONE_STATE\" />\r\n    <uses-permission\r\n        android:name=\"android.permission.BLUETOOTH\" />\r\n    <uses-permission\r\nandroid:name=\"android.permission.BLUETOOTH_ADMIN\" />\r\n```\r\nandroid.permission.READ_PHONE_STATE to get the carrier network\r\nandroid.permission.BLUETOOTH_ADMIN to get access to turn off n on the bluetooth\r\n<br>\r\n<br>\r\n```xml\r\n <service android:name=\"com.example.abraham.iNotify.NLService\"\r\n            android:label=\".NLService\"\r\n            android:permission=\"android.permission.BIND_NOTIFICATION_LISTENER_SERVICE\">\r\n            <intent-filter>\r\n                <action android:name=\"android.service.notification.NotificationListenerService\" />\r\n            </intent-filter>\r\n</service>\r\n```\r\nWe declare our notification service class.\r\nThe service class is the NLService witch we will create later.\r\nThis service will run in the background,and will receive every notification.\r\n<br>\r\n<br>\r\n\r\nBasically its only three classes,MainActivity,NLService,Utilities\r\nNLService its the notification service.\r\nMainActivity its the app's main activity with some buttons\r\nUtilities contains some string n utils methods\r\n<br>\r\n\r\n##### MainActivity\r\n```java\r\n@Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_main);\r\n\r\n        Intent intent = new Intent(\"android.settings.ACTION_NOTIFICATION_LISTENER_SETTINGS\");\r\n        startActivity(intent);\r\n}\r\n```  \r\nNote this lines:\r\nIntent intent = new Intent(\"android.settings.ACTION_NOTIFICATION_LISTENER_SETTINGS\");\r\nstartActivity(intent);\r\n<br>\r\nthis is needed to start an activity and the user can give permission to NLSerivce to run.\r\n<br>\r\nwe need to mention the below method createNotification()\r\nwitch can create notifications for test.\r\n```java\r\npublic void createNotification(View v) {\r\n        NotificationManager nManager = (NotificationManager) getSystemService(NOTIFICATION_SERVICE);\r\n        NotificationCompat.Builder ncomp = new NotificationCompat.Builder(this);\r\n        ncomp.setContentTitle(\"My Notification Title\");\r\n        ncomp.setContentText(\"Notification example\");\r\n        ncomp.setTicker(\"Notification LExample\");\r\n        ncomp.setSmallIcon(R.drawable.ic_launcher);\r\n        ncomp.setAutoCancel(true);\r\n        nManager.notify((int)System.currentTimeMillis(),ncomp.build());\r\n}\r\n```\r\n<br>\r\nand i have a sendMessage method\r\nwitch takes the text from edittext and send's it to outputstream \"bluetooth at our case\"\r\n```java\r\npublic void sendMessage(View view) throws IOException {\r\n        EditText editText = (EditText) findViewById(R.id.edit_message);\r\n        String textToSend = editText.getText().toString();\r\n        NLService.sendMessage(textToSend);\r\n}\r\n```\r\n<br>\r\n<br>\r\n\r\n\r\n\r\n\r\n\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}